package co.sistemcobro.all.util;

import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;

import co.sistemcobro.all.exception.CsvException;
import co.sistemcobro.all.exception.LogicaException;

public class Csv {

	private static Long milliseconds = 18000000L; // 1970/01/01

	public static Timestamp getTimestamp(String campo, Boolean requerido,
			String formato) throws CsvException {

		Timestamp value = null;
		String tmp = null;
		try {
			if (campo != null) {
				tmp = campo.trim();
				value = Util.stringToTimestamp(tmp, formato);

				if (null != value && value.getTime() < milliseconds) {
					if (requerido) {
						throw new LogicaException(
								"The minimum date accepted is 01/01/1970");
					} else {
						value = null;
					}
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Campo requerido");
				}
			}
		} catch (NullPointerException e) {
			throw new CsvException(e.toString());
		} catch (LogicaException e) {
			throw new CsvException(e.toString());
		} catch (Exception e) {
			throw new CsvException("Dato [" + campo
					+ "], expected a Date with format [" + formato
					+ "] > " + e.toString());
		}
		return value;
	}

	public static Integer getInteger(String campo, Boolean requerido)
			throws CsvException {
		Integer value = null;
		try {
			if (campo != null) {

				String valueString = campo.toString().trim();
				if ("".equals(valueString)) {
					if (requerido) {
						throw new LogicaException("Campo requerido");
					}
				} else {
					Double valueDouble = Double.valueOf(valueString);
					value = valueDouble.intValue();
				}

			} else {
				if (requerido) {
					throw new NullPointerException("Campo requerido");
				}
			}
		} catch (NullPointerException e) {
			throw new CsvException(e.toString());
		} catch (LogicaException e) {
			throw new CsvException(e.toString());
		} catch (Exception e) {
			throw new CsvException("Dato [" + campo
					+ "], expected a Integer > " + e.toString());
		}
		return value;
	}

	public static Double getDouble(String campo, Boolean requerido,
			String formato, DecimalFormatSymbols simbolos) throws CsvException {
		Double value = null;
		try {
			if (campo != null) {
				String valueString = campo.toString().trim();
				if ("".equals(valueString)) {
					if (requerido) {
						throw new LogicaException("Campo requerido");
					}
				} else {
					NumberFormat formatter = null;
					if (null != simbolos) {
						formatter = new DecimalFormat(formato, simbolos);
					} else {
						formatter = new DecimalFormat(formato);
					}
					value = formatter.parse(valueString).doubleValue();

				}

			} else {
				if (requerido) {
					throw new NullPointerException("Campo requerido");
				}
			}

		} catch (NullPointerException e) {
			throw new CsvException(e.toString());
		} catch (LogicaException e) {
			throw new CsvException(e.toString());
		} catch (Exception e) {
			throw new CsvException("Dato [" + campo
					+ "], expected a Decimal > " + e.toString());
		}
		return value;
	}

	public static Long getLong(String campo, Boolean requerido)
			throws CsvException {
		Long value = null;
		try {
			if (campo != null) {

				String valueString = campo.toString().trim();
				if ("".equals(valueString)) {
					if (requerido) {
						throw new LogicaException("Campo requerido");
					}
				} else {
					Double valueDouble = Double.valueOf(valueString);
					value = valueDouble.longValue();
				}

			} else {
				if (requerido) {
					throw new NullPointerException("Campo requerido");
				}
			}
		} catch (NullPointerException e) {
			throw new CsvException(e.toString());
		} catch (LogicaException e) {
			throw new CsvException(e.toString());
		} catch (Exception e) {
			throw new CsvException("Data [" + campo + "], expected a Long > "
					+ e.toString());
		}
		return value;
	}

	public static String getString(String campo, Boolean requerido)
			throws CsvException {
		String value = null;
		try {
			if (campo != null) {
				String valueString = null;
				valueString = campo.toString().trim();

				if ("".equals(valueString)) {
					if (requerido) {
						throw new LogicaException("Campo requerido");
					}
				} else {
					value = valueString;
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Campo requerido");
				}
			}
		} catch (NullPointerException e) {
			throw new CsvException("Dato [" + campo.toString() + "] > "
					+ e.toString());
		} catch (LogicaException e) {
			throw new CsvException("Dato [" + campo.toString() + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new CsvException("Dato [" + campo.toString() + "] > "
					+ e.toString());
		}
		return value;
	}

}
