package co.sistemcobro.all.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.util.Date;

import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCell;

import co.sistemcobro.all.exception.ExcelException;
import co.sistemcobro.all.exception.LogicaException;

public class Excel {

	private static Long milliseconds = 18000000L; // 1970/01/01

	public static Timestamp getTimestamp(Cell cell, Boolean requerido,
			String formato) throws ExcelException {

		Timestamp value = null;
		String tmp = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else {
					switch (cell.getCellType()) {
					case Cell.CELL_TYPE_STRING:
						tmp = cell.toString().trim();
						value = Util.stringToTimestamp(tmp, formato);
						break;
					case Cell.CELL_TYPE_NUMERIC:
						if (HSSFDateUtil.isCellDateFormatted(cell)) {
							tmp = cell.getDateCellValue().toString();
							value = Util.stringToTimestamp(tmp, formato);
						} else {
							Double valueD = cell.getNumericCellValue();
							Long longValue = valueD.longValue();
							tmp = new String(longValue.toString().trim());
							value = Util.stringToTimestamp(tmp, formato);
						}
						break;
					case Cell.CELL_TYPE_BOOLEAN:
						tmp = new String(
								new Boolean(cell.getBooleanCellValue())
										.toString().trim());
						value = Util.stringToTimestamp(tmp, formato);
						break;
					default:
						tmp = cell.toString().trim();
						value = Util.stringToTimestamp(tmp, formato);
					}

					if (null != value && value.getTime() < milliseconds) {
						if (requerido) {
							throw new LogicaException(
									"The minimum date accepted is 01/01/1970");
						} else {
							value = null;
						}

					}
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static Timestamp getTimestamp(Cell cell, Boolean requerido)
			throws ExcelException {
		Timestamp value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else {
					value = new Timestamp(cell.getDateCellValue().getTime());
					if (null != value && value.getTime() < milliseconds) {
						if (requerido) {
							throw new LogicaException(
									"The minimum date accepted is 01/01/1970");
						} else {
							value = null;
						}

					}
				}

			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static Date getDate(Cell cell, Boolean requerido)
			throws ExcelException {
		Date value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else {
					value = cell.getDateCellValue();
					if (null != value && value.getTime() < milliseconds) {
						if (requerido) {
							throw new LogicaException(
									"The minimum date accepted is 01/01/1970");
						} else {
							value = null;
						}

					}
				}

			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static Integer getInteger(Cell cell, Boolean requerido)
			throws ExcelException {
		Integer value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
					String valueString = cell.toString().trim();
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						Double valueDouble = Double.valueOf(valueString);
						value = valueDouble.intValue();
					}

				} else {
					value = (int) cell.getNumericCellValue();
				}

			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static BigInteger getBigInteger(Cell cell, Boolean requerido)
			throws ExcelException {
		BigInteger value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
					String valueString = cell.toString().trim();
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						BigInteger valueBigInteger = BigInteger.valueOf(Long.parseLong(valueString));
						value = valueBigInteger;
					}

				} else {
					
					Double valueDouble = cell.getNumericCellValue();
					value = BigInteger.valueOf(valueDouble.longValue());
				}

			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}
	
	public static BigDecimal getBigDecimal(Cell cell, Boolean requerido)
			throws ExcelException {
		BigDecimal value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
					String valueString = cell.toString().trim();
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						
						BigDecimal valueBigDecimal = BigDecimal.valueOf(Double.valueOf(valueString));						
						value = valueBigDecimal;
					}
				} else {
					value = BigDecimal.valueOf(cell.getNumericCellValue());
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}

		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}
	
	public static Double getDouble(Cell cell, Boolean requerido)
			throws ExcelException {
		Double value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
					String valueString = cell.toString().trim();
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						value = Double.valueOf(valueString);
					}
				} else {
					value = cell.getNumericCellValue();
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}

		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}
	
	public static Long getLong(Cell cell, Boolean requerido)
			throws ExcelException {
		Long value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
					String valueString = cell.toString().trim();
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						Double valueDouble = Double.valueOf(valueString);
						value = valueDouble.longValue();
					}

				} else {
					Double valueDouble = cell.getNumericCellValue();
					value = valueDouble.longValue();
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static String getString(Cell cell, Boolean requerido)
			throws ExcelException {
		String value = null;

		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else {
					String valueString = null;
					switch (cell.getCellType()) {
					case Cell.CELL_TYPE_STRING:
						valueString = cell.toString().trim();
						break;
					case Cell.CELL_TYPE_NUMERIC:
						if (HSSFDateUtil.isCellDateFormatted(cell)) {
							valueString = cell.getDateCellValue().toString();
						} else {
							Double valueD = cell.getNumericCellValue();
							Long longValue = valueD.longValue();
							valueString = new String(longValue.toString()
									.trim());
						}
						break;
					case Cell.CELL_TYPE_BOOLEAN:
						valueString = new String(new Boolean(
								cell.getBooleanCellValue()).toString().trim());
						break;
					default:
						valueString = cell.toString().trim();
					}
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						value = valueString;
					}
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static String getNameCell(Cell cell) {
		String namecelda = "";
		if (null != cell) {
			String fila = String.valueOf(cell.getRowIndex() + 1);
			namecelda = getNameColumna(cell.getColumnIndex()) + fila;
		}
		return namecelda;
	}

	public static Timestamp getTimestamp(XSSFCell cell, Boolean requerido,
			String formato) throws ExcelException {

		Timestamp value = null;
		String tmp = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else {
					switch (cell.getCellType()) {
					case Cell.CELL_TYPE_STRING:
						tmp = cell.toString().trim();
						value = Util.stringToTimestamp(tmp, formato);
						break;
					case Cell.CELL_TYPE_NUMERIC:
						if (HSSFDateUtil.isCellDateFormatted(cell)) {
							tmp = cell.getDateCellValue().toString();
							value = Util.dateToTimeStamp(cell.getDateCellValue());
						} else {
							Double valueD = cell.getNumericCellValue();
							Long longValue = valueD.longValue();
							tmp = new String(longValue.toString().trim());
							value = Util.stringToTimestamp(tmp, formato);
						}
						break;
					case Cell.CELL_TYPE_BOOLEAN:
						tmp = new String(
								new Boolean(cell.getBooleanCellValue())
										.toString().trim());
						value = Util.stringToTimestamp(tmp, formato);
						break;
					default:
						tmp = cell.toString().trim();
						value = Util.stringToTimestamp(tmp, formato);
					}

					if (null != value && value.getTime() < milliseconds) {
						if (requerido) {
							throw new LogicaException(
									"The minimum date accepted is 01/01/1970");
						} else {
							value = null;
						}

					}
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static Timestamp getTimestamp(XSSFCell cell, Boolean requerido)
			throws ExcelException {
		Timestamp value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else {
					value = Util.dateToTimeStamp(cell.getDateCellValue());
					if (null != value && value.getTime() < milliseconds) {
						if (requerido) {
							throw new LogicaException(
									"The minimum date accepted is 01/01/1970");
						} else {
							value = null;
						}

					}
				}

			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static Date getDate(XSSFCell cell, Boolean requerido)
			throws ExcelException {
		Date value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else {
					value = cell.getDateCellValue();
					if (null != value && value.getTime() < milliseconds) {
						if (requerido) {
							throw new LogicaException(
									"The minimum date accepted is 01/01/1970");
						} else {
							value = null;
						}

					}
				}

			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static Integer getInteger(XSSFCell cell, Boolean requerido)
			throws ExcelException {
		Integer value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
					String valueString = cell.toString().trim();
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						Double valueDouble = Double.valueOf(valueString);
						value = valueDouble.intValue();
					}

				} else {
					value = (int) cell.getNumericCellValue();
				}

			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static Double getDouble(XSSFCell cell, Boolean requerido)
			throws ExcelException {
		Double value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
					String valueString = cell.toString().trim();
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						value = Double.valueOf(valueString);
					}
				} else {
					value = cell.getNumericCellValue();
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}

		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static Long getLong(XSSFCell cell, Boolean requerido)
			throws ExcelException {
		Long value = null;
		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else if (cell.getCellType() == Cell.CELL_TYPE_STRING) {
					String valueString = cell.toString().trim();
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						Double valueDouble = Double.valueOf(valueString);
						value = valueDouble.longValue();
					}

				} else {
					Double valueDouble = cell.getNumericCellValue();
					value = valueDouble.longValue();
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static String getString(XSSFCell cell, Boolean requerido)
			throws ExcelException {
		String value = null;

		try {
			if (cell != null) {
				if (Cell.CELL_TYPE_BLANK == cell.getCellType()) {
					if (requerido) {
						throw new LogicaException("Celda requerida");
					}
				} else {
					String valueString = null;
					switch (cell.getCellType()) {
					case Cell.CELL_TYPE_STRING:
						valueString = cell.toString().trim();
						break;
					case Cell.CELL_TYPE_NUMERIC:
						if (HSSFDateUtil.isCellDateFormatted(cell)) {
							valueString = cell.getDateCellValue().toString();
						} else {
							Double valueD = cell.getNumericCellValue();
							Long longValue = valueD.longValue();
							valueString = new String(longValue.toString()
									.trim());
						}
						break;
					case Cell.CELL_TYPE_BOOLEAN:
						valueString = new String(new Boolean(
								cell.getBooleanCellValue()).toString().trim());
						break;
					default:
						valueString = cell.toString().trim();
					}
					if ("".equals(valueString)) {
						if (requerido) {
							throw new LogicaException("Celda requerida");
						}
					} else {
						value = valueString;
					}
				}
			} else {
				if (requerido) {
					throw new NullPointerException("Celda requerida");
				}
			}
		} catch (NullPointerException e) {
			throw new ExcelException(e.toString());
		} catch (LogicaException e) {
			throw new ExcelException("Celda:[" + getNameCell(cell) + "] > "
					+ e.toString());
		} catch (Exception e) {
			throw new ExcelException("Celda:[" + getNameCell(cell)
					+ "], Dato:[" + cell.toString() + "] > " + e.toString());
		}
		return value;
	}

	public static String getNameCell(XSSFCell cell) {
		String namecelda = "";
		if (null != cell) {
			String fila = String.valueOf(cell.getRowIndex() + 1);
			namecelda = getNameColumna(cell.getColumnIndex()) + fila;
		}
		return namecelda;
	}

	private static String getNameColumna(Integer columnindex) {
		String namecolumna = "";
		namecolumna = letra[columnindex];
		return namecolumna;
	}

	private static String[] letra = { "A", "B", "C", "D", "E", "F", "G", "H",
			"I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U",
			"V", "W", "X", "Y", "Z", "AA", "AB", "AC", "AD", "AE", "AF", "AG",
			"AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR",
			"AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ", "BA", "BB", "BC",
			"BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BK", "BL", "BM", "BN",
			"BO", "BP", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BX", "BY",
			"BZ", "CA", "CB", "CC", "CD", "CE", "CF", "CG", "CH", "CI", "CJ",
			"CK", "CL", "CM", "CN", "CO", "CP", "CQ", "CR", "CS", "CT", "CU",
			"CV", "CW", "CX", "CY", "CZ", "DA", "DB", "DC", "DD", "DE", "DF",
			"DG", "DH", "DI", "DJ", "DK", "DL", "DM", "DN", "DO", "DP", "DQ",
			"DR", "DS", "DT", "DU", "DV", "DW", "DX", "DY", "DZ", "EA", "EB",
			"EC", "ED", "EE", "EF", "EG", "EH", "EI", "EJ", "EK", "EL", "EM",
			"EN", "EO", "EP", "EQ", "ER", "ES", "ET", "EU", "EV", "EW", "EX",
			"EY", "EZ", "FA", "FB", "FC", "FD", "FE", "FF", "FG", "FH", "FI",
			"FJ", "FK", "FL", "FM", "FN", "FO", "FP", "FQ", "FR", "FS", "FT",
			"FU", "FV", "FW", "FX", "FY", "FZ", "GA", "GB", "GC", "GD", "GE",
			"GF", "GG", "GH", "GI", "GJ", "GK", "GL", "GM", "GN", "GO", "GP",
			"GQ", "GR", "GS", "GT", "GU", "GV", "GW", "GX", "GY", "GZ", "HA",
			"HB", "HC", "HD", "HE", "HF", "HG", "HH", "HI", "HJ", "HK", "HL",
			"HM", "HN", "HO", "HP", "HQ", "HR", "HS", "HT", "HU", "HV", "HW",
			"HX", "HY", "HZ", "IA", "IB", "IC", "ID", "IE", "IF", "IG", "IH",
			"II", "IJ", "IK", "IL", "IM", "IN", "IO", "IP", "IQ", "IR", "IS",
			"IT", "IU", "IV", "IW", "IX", "IY", "IZ", "JA", "JB", "JC", "JD",
			"JE", "JF", "JG", "JH", "JI", "JJ", "JK", "JL", "JM", "JN", "JO",
			"JP", "JQ", "JR", "JS", "JT", "JU", "JV", "JW", "JX", "JY", "JZ",
			"KA", "KB", "KC", "KD", "KE", "KF", "KG", "KH", "KI", "KJ", "KK",
			"KL", "KM", "KN", "KO", "KP", "KQ", "KR", "KS", "KT", "KU", "KV",
			"KW", "KX", "KY", "KZ", "LA", "LB", "LC", "LD", "LE", "LF", "LG",
			"LH", "LI", "LJ", "LK", "LL", "LM", "LN", "LO", "LP", "LQ", "LR",
			"LS", "LT", "LU", "LV", "LW", "LX", "LY", "LZ", "MA", "MB", "MC",
			"MD", "ME", "MF", "MG", "MH", "MI", "MJ", "MK", "ML", "MM", "MN",
			"MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY",
			"MZ", "NA", "NB", "NC", "ND", "NE", "NF", "NG", "NH", "NI", "NJ",
			"NK", "NL", "NM", "NN", "NO", "NP", "NQ", "NR", "NS", "NT", "NU",
			"NV", "NW", "NX", "NY", "NZ", "OA", "OB", "OC", "OD", "OE", "OF",
			"OG", "OH", "OI", "OJ", "OK", "OL", "OM", "ON", "OO", "OP", "OQ",
			"OR", "OS", "OT", "OU", "OV", "OW", "OX", "OY", "OZ", "PA", "PB",
			"PC", "PD", "PE", "PF", "PG", "PH", "PI", "PJ", "PK", "PL", "PM",
			"PN", "PO", "PP", "PQ", "PR", "PS", "PT", "PU", "PV", "PW", "PX",
			"PY", "PZ", "QA", "QB", "QC", "QD", "QE", "QF", "QG", "QH", "QI",
			"QJ", "QK", "QL", "QM", "QN", "QO", "QP", "QQ", "QR", "QS", "QT",
			"QU", "QV", "QW", "QX", "QY", "QZ", "RA", "RB", "RC", "RD", "RE",
			"RF", "RG", "RH", "RI", "RJ", "RK", "RL", "RM", "RN", "RO", "RP",
			"RQ", "RR", "RS", "RT", "RU", "RV", "RW", "RX", "RY", "RZ", "SA",
			"SB", "SC", "SD", "SE", "SF", "SG", "SH", "SI", "SJ", "SK", "SL",
			"SM", "SN", "SO", "SP", "SQ", "SR", "SS", "ST", "SU", "SV", "SW",
			"SX", "SY", "SZ", "TA", "TB", "TC", "TD", "TE", "TF", "TG", "TH",
			"TI", "TJ", "TK", "TL", "TM", "TN", "TO", "TP", "TQ", "TR", "TS",
			"TT", "TU", "TV", "TW", "TX", "TY", "TZ", "UA", "UB", "UC", "UD",
			"UE", "UF", "UG", "UH", "UI", "UJ", "UK", "UL", "UM", "UN", "UO",
			"UP", "UQ", "UR", "US", "UT", "UU", "UV", "UW", "UX", "UY", "UZ",
			"VA", "VB", "VC", "VD", "VE", "VF", "VG", "VH", "VI", "VJ", "VK",
			"VL", "VM", "VN", "VO", "VP", "VQ", "VR", "VS", "VT", "VU", "VV",
			"VW", "VX", "VY", "VZ", "WA", "WB", "WC", "WD", "WE", "WF", "WG",
			"WH", "WI", "WJ", "WK", "WL", "WM", "WN", "WO", "WP", "WQ", "WR",
			"WS", "WT", "WU", "WV", "WW", "WX", "WY", "WZ", "XA", "XB", "XC",
			"XD", "XE", "XF", "XG", "XH", "XI", "XJ", "XK", "XL", "XM", "XN",
			"XO", "XP", "XQ", "XR", "XS", "XT", "XU", "XV", "XW", "XX", "XY",
			"XZ", "YA", "YB", "YC", "YD", "YE", "YF", "YG", "YH", "YI", "YJ",
			"YK", "YL", "YM", "YN", "YO", "YP", "YQ", "YR", "YS", "YT", "YU",
			"YV", "YW", "YX", "YY", "YZ", "ZA", "ZB", "ZC", "ZD", "ZE", "ZF",
			"ZG", "ZH", "ZI", "ZJ", "ZK", "ZL", "ZM", "ZN", "ZO", "ZP", "ZQ",
			"ZR", "ZS", "ZT", "ZU", "ZV", "ZW", "ZX", "ZY", "ZZ" };

}
